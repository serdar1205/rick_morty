// Mocks generated by Mockito 5.4.5 from annotations
// in rick_morty/test/features/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:dio/dio.dart' as _i2;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rick_morty/core/error/failure.dart' as _i8;
import 'package:rick_morty/core/network/api_provider.dart' as _i5;
import 'package:rick_morty/features/domain/entities/character_entity.dart'
    as _i9;
import 'package:rick_morty/features/domain/reposotories/character_repository.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_2 extends _i1.SmartFake
    implements _i3.AddressCheckResult {
  _FakeAddressCheckResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiProvider extends _i1.Mock implements _i5.ApiProvider {
  @override
  _i6.Future<_i2.Response<dynamic>> post({
    String? baseUrl,
    required String? endPoint,
    Map<String, dynamic>? data,
    dynamic query,
    String? token,
    _i2.ProgressCallback? progressCallback,
    _i2.CancelToken? cancelToken,
    int? timeOut,
    bool? isMultiPart = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [],
          {
            #baseUrl: baseUrl,
            #endPoint: endPoint,
            #data: data,
            #query: query,
            #token: token,
            #progressCallback: progressCallback,
            #cancelToken: cancelToken,
            #timeOut: timeOut,
            #isMultiPart: isMultiPart,
          },
        ),
        returnValue:
            _i6.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #post,
            [],
            {
              #baseUrl: baseUrl,
              #endPoint: endPoint,
              #data: data,
              #query: query,
              #token: token,
              #progressCallback: progressCallback,
              #cancelToken: cancelToken,
              #timeOut: timeOut,
              #isMultiPart: isMultiPart,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #post,
            [],
            {
              #baseUrl: baseUrl,
              #endPoint: endPoint,
              #data: data,
              #query: query,
              #token: token,
              #progressCallback: progressCallback,
              #cancelToken: cancelToken,
              #timeOut: timeOut,
              #isMultiPart: isMultiPart,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<dynamic>> get({
    String? baseUrl,
    required String? endPoint,
    dynamic data,
    dynamic query,
    String? token,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
    int? timeOut,
    bool? isMultiPart = false,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #baseUrl: baseUrl,
            #endPoint: endPoint,
            #data: data,
            #query: query,
            #token: token,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
            #timeOut: timeOut,
            #isMultiPart: isMultiPart,
            #options: options,
          },
        ),
        returnValue:
            _i6.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #get,
            [],
            {
              #baseUrl: baseUrl,
              #endPoint: endPoint,
              #data: data,
              #query: query,
              #token: token,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
              #timeOut: timeOut,
              #isMultiPart: isMultiPart,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #get,
            [],
            {
              #baseUrl: baseUrl,
              #endPoint: endPoint,
              #data: data,
              #query: query,
              #token: token,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
              #timeOut: timeOut,
              #isMultiPart: isMultiPart,
              #options: options,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<dynamic>> put({
    String? baseUrl,
    required String? endPoint,
    dynamic data,
    dynamic query,
    String? token,
    _i2.CancelToken? cancelToken,
    int? timeOut,
    bool? isMultipart = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [],
          {
            #baseUrl: baseUrl,
            #endPoint: endPoint,
            #data: data,
            #query: query,
            #token: token,
            #cancelToken: cancelToken,
            #timeOut: timeOut,
            #isMultipart: isMultipart,
          },
        ),
        returnValue:
            _i6.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #put,
            [],
            {
              #baseUrl: baseUrl,
              #endPoint: endPoint,
              #data: data,
              #query: query,
              #token: token,
              #cancelToken: cancelToken,
              #timeOut: timeOut,
              #isMultipart: isMultipart,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #put,
            [],
            {
              #baseUrl: baseUrl,
              #endPoint: endPoint,
              #data: data,
              #query: query,
              #token: token,
              #cancelToken: cancelToken,
              #timeOut: timeOut,
              #isMultipart: isMultipart,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<dynamic>> patch({
    String? baseUrl,
    required String? endPoint,
    dynamic data,
    dynamic query,
    String? token,
    _i2.CancelToken? cancelToken,
    int? timeOut,
    bool? isMultipart = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [],
          {
            #baseUrl: baseUrl,
            #endPoint: endPoint,
            #data: data,
            #query: query,
            #token: token,
            #cancelToken: cancelToken,
            #timeOut: timeOut,
            #isMultipart: isMultipart,
          },
        ),
        returnValue:
            _i6.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #patch,
            [],
            {
              #baseUrl: baseUrl,
              #endPoint: endPoint,
              #data: data,
              #query: query,
              #token: token,
              #cancelToken: cancelToken,
              #timeOut: timeOut,
              #isMultipart: isMultipart,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #patch,
            [],
            {
              #baseUrl: baseUrl,
              #endPoint: endPoint,
              #data: data,
              #query: query,
              #token: token,
              #cancelToken: cancelToken,
              #timeOut: timeOut,
              #isMultipart: isMultipart,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<dynamic>> delete({
    String? baseUrl,
    required String? endPoint,
    dynamic data,
    dynamic query,
    String? token,
    int? timeOut,
    bool? isMultiPart = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #baseUrl: baseUrl,
            #endPoint: endPoint,
            #data: data,
            #query: query,
            #token: token,
            #timeOut: timeOut,
            #isMultiPart: isMultiPart,
          },
        ),
        returnValue:
            _i6.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #delete,
            [],
            {
              #baseUrl: baseUrl,
              #endPoint: endPoint,
              #data: data,
              #query: query,
              #token: token,
              #timeOut: timeOut,
              #isMultiPart: isMultiPart,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #delete,
            [],
            {
              #baseUrl: baseUrl,
              #endPoint: endPoint,
              #data: data,
              #query: query,
              #token: token,
              #timeOut: timeOut,
              #isMultiPart: isMultiPart,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response<dynamic>>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i3.InternetConnectionChecker {
  @override
  bool get requireAllAddressesToRespond => (super.noSuchMethod(
        Invocation.getter(#requireAllAddressesToRespond),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set requireAllAddressesToRespond(bool? _requireAllAddressesToRespond) =>
      super.noSuchMethod(
        Invocation.setter(
          #requireAllAddressesToRespond,
          _requireAllAddressesToRespond,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get enableToCheckForSlowConnection => (super.noSuchMethod(
        Invocation.getter(#enableToCheckForSlowConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set enableToCheckForSlowConnection(bool? _enableToCheckForSlowConnection) =>
      super.noSuchMethod(
        Invocation.setter(
          #enableToCheckForSlowConnection,
          _enableToCheckForSlowConnection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration get slowConnectionThreshold => (super.noSuchMethod(
        Invocation.getter(#slowConnectionThreshold),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#slowConnectionThreshold),
        ),
        returnValueForMissingStub: _FakeDuration_1(
          this,
          Invocation.getter(#slowConnectionThreshold),
        ),
      ) as Duration);

  @override
  set slowConnectionThreshold(Duration? _slowConnectionThreshold) =>
      super.noSuchMethod(
        Invocation.setter(
          #slowConnectionThreshold,
          _slowConnectionThreshold,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#checkTimeout),
        ),
        returnValueForMissingStub: _FakeDuration_1(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);

  @override
  set checkTimeout(Duration? _checkTimeout) => super.noSuchMethod(
        Invocation.setter(
          #checkTimeout,
          _checkTimeout,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#checkInterval),
        ),
        returnValueForMissingStub: _FakeDuration_1(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  set checkInterval(Duration? _checkInterval) => super.noSuchMethod(
        Invocation.setter(
          #checkInterval,
          _checkInterval,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.AddressCheckOption> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i3.AddressCheckOption>[],
        returnValueForMissingStub: <_i3.AddressCheckOption>[],
      ) as List<_i3.AddressCheckOption>);

  @override
  set addresses(List<_i3.AddressCheckOption>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Stream<_i3.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i6.Stream<_i3.InternetConnectionStatus>.empty(),
        returnValueForMissingStub:
            _i6.Stream<_i3.InternetConnectionStatus>.empty(),
      ) as _i6.Stream<_i3.InternetConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i3.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i6.Future<_i3.InternetConnectionStatus>.value(
            _i3.InternetConnectionStatus.connected),
        returnValueForMissingStub:
            _i6.Future<_i3.InternetConnectionStatus>.value(
                _i3.InternetConnectionStatus.connected),
      ) as _i6.Future<_i3.InternetConnectionStatus>);

  @override
  set setLastStatus(_i3.InternetConnectionStatus? status) => super.noSuchMethod(
        Invocation.setter(
          #setLastStatus,
          status,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set setRequireAllAddressesToRespond(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #setRequireAllAddressesToRespond,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<_i6.Future<_i3.AddressCheckResult>> createAddressCheckFutures(
          List<_i3.AddressCheckOption>? addresses) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAddressCheckFutures,
          [addresses],
        ),
        returnValue: <_i6.Future<_i3.AddressCheckResult>>[],
        returnValueForMissingStub: <_i6.Future<_i3.AddressCheckResult>>[],
      ) as Iterable<_i6.Future<_i3.AddressCheckResult>>);

  @override
  _i6.Future<bool> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i3.AddressCheckResult> isHostReachable(
          _i3.AddressCheckOption? option) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [option],
        ),
        returnValue:
            _i6.Future<_i3.AddressCheckResult>.value(_FakeAddressCheckResult_2(
          this,
          Invocation.method(
            #isHostReachable,
            [option],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.AddressCheckResult>.value(_FakeAddressCheckResult_2(
          this,
          Invocation.method(
            #isHostReachable,
            [option],
          ),
        )),
      ) as _i6.Future<_i3.AddressCheckResult>);

  @override
  _i6.Future<void> maybeEmitStatusUpdate({
    _i6.Timer? timer,
    Function? cancelCallback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #maybeEmitStatusUpdate,
          [],
          {
            #timer: timer,
            #cancelCallback: cancelCallback,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void emitStatus(_i3.InternetConnectionStatus? newStatus) =>
      super.noSuchMethod(
        Invocation.method(
          #emitStatus,
          [newStatus],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startMonitoring() => super.noSuchMethod(
        Invocation.method(
          #startMonitoring,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cancelStatusUpdate() => super.noSuchMethod(
        Invocation.method(
          #cancelStatusUpdate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void configure({
    Duration? timeout,
    Duration? interval,
    List<_i3.AddressCheckOption>? addresses,
    _i3.SlowConnectionConfig? slowConnectionConfig,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #configure,
          [],
          {
            #timeout: timeout,
            #interval: interval,
            #addresses: addresses,
            #slowConnectionConfig: slowConnectionConfig,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CharacterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterRepository extends _i1.Mock
    implements _i7.CharacterRepository {
  @override
  _i6.Future<
      _i4.Either<_i8.Failure, List<_i9.CharacterEntity>>> getAllCharacters(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCharacters,
          [page],
        ),
        returnValue: _i6
            .Future<_i4.Either<_i8.Failure, List<_i9.CharacterEntity>>>.value(
            _FakeEither_3<_i8.Failure, List<_i9.CharacterEntity>>(
          this,
          Invocation.method(
            #getAllCharacters,
            [page],
          ),
        )),
        returnValueForMissingStub: _i6
            .Future<_i4.Either<_i8.Failure, List<_i9.CharacterEntity>>>.value(
            _FakeEither_3<_i8.Failure, List<_i9.CharacterEntity>>(
          this,
          Invocation.method(
            #getAllCharacters,
            [page],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i8.Failure, List<_i9.CharacterEntity>>>);

  @override
  _i6.Future<_i4.Either<_i8.Failure, bool>> addToFavorite(
          _i9.CharacterEntity? character) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToFavorite,
          [character],
        ),
        returnValue: _i6.Future<_i4.Either<_i8.Failure, bool>>.value(
            _FakeEither_3<_i8.Failure, bool>(
          this,
          Invocation.method(
            #addToFavorite,
            [character],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i8.Failure, bool>>.value(
                _FakeEither_3<_i8.Failure, bool>(
          this,
          Invocation.method(
            #addToFavorite,
            [character],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i8.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i8.Failure, List<_i9.CharacterEntity>>>
      getFavorites() => (super.noSuchMethod(
            Invocation.method(
              #getFavorites,
              [],
            ),
            returnValue: _i6.Future<
                    _i4.Either<_i8.Failure, List<_i9.CharacterEntity>>>.value(
                _FakeEither_3<_i8.Failure, List<_i9.CharacterEntity>>(
              this,
              Invocation.method(
                #getFavorites,
                [],
              ),
            )),
            returnValueForMissingStub: _i6.Future<
                    _i4.Either<_i8.Failure, List<_i9.CharacterEntity>>>.value(
                _FakeEither_3<_i8.Failure, List<_i9.CharacterEntity>>(
              this,
              Invocation.method(
                #getFavorites,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i8.Failure, List<_i9.CharacterEntity>>>);

  @override
  _i6.Future<_i4.Either<_i8.Failure, bool>> deleteFavorites() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFavorites,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i8.Failure, bool>>.value(
            _FakeEither_3<_i8.Failure, bool>(
          this,
          Invocation.method(
            #deleteFavorites,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i8.Failure, bool>>.value(
                _FakeEither_3<_i8.Failure, bool>(
          this,
          Invocation.method(
            #deleteFavorites,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i8.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i8.Failure, bool>> deleteFavoriteOne(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFavoriteOne,
          [id],
        ),
        returnValue: _i6.Future<_i4.Either<_i8.Failure, bool>>.value(
            _FakeEither_3<_i8.Failure, bool>(
          this,
          Invocation.method(
            #deleteFavoriteOne,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i8.Failure, bool>>.value(
                _FakeEither_3<_i8.Failure, bool>(
          this,
          Invocation.method(
            #deleteFavoriteOne,
            [id],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i8.Failure, bool>>);
}
